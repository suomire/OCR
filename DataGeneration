import numpy as np
import cv2
import os

MIN_CONTOUR_AREA = 110  # K image has 2 contours--????

RESIZED_IMAGE_WIDTH = 20
RESIZED_IMAGE_HEIGHT = 30


def main():
    train_image = cv2.imread("images/training_chars.png")

    if train_image is None:
        print("error")
        os.system("pause")
        return

    gray_image = cv2.cvtColor(train_image, cv2.COLOR_BGR2GRAY)
    blur_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

    bw_image = cv2.adaptiveThreshold(blur_image, 255,
                                     cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                     cv2.THRESH_BINARY_INV,
                                     11, 2)

    cv2.imshow("bw_image", bw_image)

    bw_image_copy = bw_image.copy()

    npa_contours, npa_hierarchy = cv2.findContours(bw_image_copy,
                                                   cv2.RETR_EXTERNAL,
                                                   cv2.CHAIN_APPROX_SIMPLE)

    npa_flattened_images = np.empty((0, RESIZED_IMAGE_WIDTH * RESIZED_IMAGE_HEIGHT))

    int_classifications = []

    # possible chars in this list
    int_valid_chars = [ord('0'), ord('1'), ord('2'), ord('3'), ord('4'), ord('5'), ord('6'), ord('7'), ord('8'),
                       ord('9'),
                       ord('A'), ord('B'), ord('C'), ord('D'), ord('E'), ord('F'), ord('G'), ord('H'), ord('I'),
                       ord('J'),
                       ord('K'), ord('L'), ord('M'), ord('N'), ord('O'), ord('P'), ord('Q'), ord('R'), ord('S'),
                       ord('T'),
                       ord('U'), ord('V'), ord('W'), ord('X'), ord('Y'), ord('Z'), ord(' ')]



    for npa_contour in npa_contours:
        if cv2.contourArea(npa_contour) > MIN_CONTOUR_AREA:  # if contour is big enough to consider  ??
            [intX, intY, intW, intH] = cv2.boundingRect(npa_contour)

            cv2.rectangle(train_image,  # draw rectangle on original training image
                          (intX, intY),  # up left
                          (intX + intW, intY + intH),  # down right
                          (0, 0, 255),  # red
                          2)  # thickness

            char_img = bw_image[intY:intY + intH, intX:intX + intW]
            char_img_resized = cv2.resize(char_img, (RESIZED_IMAGE_WIDTH,
                                                     RESIZED_IMAGE_HEIGHT))  # for recognition and storage--??

            cv2.imshow("char_img", char_img)
            # cv2.imshow("char_img_resized", char_img_resized)
            cv2.imshow("training_numbers.png",train_image)  # original img with rectangle

            int_char = cv2.waitKey(0)  # get key

            if int_char in int_valid_chars:  # if pressed key is in the int_valid_list
                int_classifications.append(
                    int_char)

                # flatten image to array for writing to file
                npa_flattened_image = char_img_resized.reshape((1,
                                                                RESIZED_IMAGE_WIDTH * RESIZED_IMAGE_HEIGHT))
                # add to list of flattened image
                npa_flattened_images = np.append(npa_flattened_images, npa_flattened_image,
                                                 0)
    flt_classifications = np.array(int_classifications,
                                   np.float32)

    npa_classifications = flt_classifications.reshape(
        (flt_classifications.size, 1))

    print("\n\ntraining complete !!\n")

    np.savetxt("classifications.txt", npa_classifications)
    # noinspection PyTypeChecker
    np.savetxt("flattened_images.txt", npa_flattened_images)

    cv2.destroyAllWindows()  # remove windows from memory

    return


if __name__ == "__main__":
    main()
